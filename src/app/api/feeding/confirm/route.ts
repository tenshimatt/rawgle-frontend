import { NextRequest, NextResponse } from 'next/server';

// Import feeding store (in a real app, this would be in a shared module)
const feedingStore = new Map<string, any[]>();

/**
 * Confirm auto-generated feeding records
 * POST /api/feeding/confirm
 * Body: { recordIds: string[] } or { confirmAll: true, startDate?: string, endDate?: string }
 */
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { recordIds, confirmAll, startDate, endDate } = body;

    const userId = req.headers.get('x-user-id') || 'demo-user';
    const records = feedingStore.get(userId) || [];

    let confirmedCount = 0;

    if (confirmAll) {
      // Confirm all auto-generated records in the date range
      const start = startDate ? new Date(startDate) : new Date(0);
      const end = endDate ? new Date(endDate) : new Date('2100-01-01');

      for (const record of records) {
        if (record.autoGenerated && !record.confirmed) {
          const recordDate = new Date(record.date);
          if (recordDate >= start && recordDate <= end) {
            record.confirmed = true;
            record.confirmedAt = new Date().toISOString();
            confirmedCount++;
          }
        }
      }
    } else if (recordIds && Array.isArray(recordIds)) {
      // Confirm specific records by ID
      for (const record of records) {
        if (recordIds.includes(record.id) && record.autoGenerated && !record.confirmed) {
          record.confirmed = true;
          record.confirmedAt = new Date().toISOString();
          confirmedCount++;
        }
      }
    } else {
      return NextResponse.json(
        { success: false, error: 'Either recordIds array or confirmAll=true is required' },
        { status: 400 }
      );
    }

    feedingStore.set(userId, records);

    return NextResponse.json({
      success: true,
      data: {
        confirmed: confirmedCount,
      },
    });
  } catch (error) {
    console.error('Confirm feeding records error:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to confirm feeding records' },
      { status: 500 }
    );
  }
}

/**
 * Delete/reject auto-generated feeding records
 * DELETE /api/feeding/confirm?recordIds=id1,id2,id3
 */
export async function DELETE(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const recordIdsParam = searchParams.get('recordIds');

    if (!recordIdsParam) {
      return NextResponse.json(
        { success: false, error: 'recordIds parameter is required' },
        { status: 400 }
      );
    }

    const recordIds = recordIdsParam.split(',');
    const userId = req.headers.get('x-user-id') || 'demo-user';
    const records = feedingStore.get(userId) || [];

    const initialLength = records.length;
    const filteredRecords = records.filter(r => !recordIds.includes(r.id));
    const deletedCount = initialLength - filteredRecords.length;

    feedingStore.set(userId, filteredRecords);

    return NextResponse.json({
      success: true,
      data: {
        deleted: deletedCount,
      },
    });
  } catch (error) {
    console.error('Delete feeding records error:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to delete feeding records' },
      { status: 500 }
    );
  }
}
