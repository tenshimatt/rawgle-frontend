version: '3.8'

services:
  mcp-playwright:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mcp-playwright-server

    # Environment variables
    environment:
      - NODE_ENV=production
      - ARTIFACTS_DIR=/data/test-results
      - MAX_CONCURRENT_RUNS=3
      - MAX_TEST_DURATION=300000
      - BROWSER_TIMEOUT=30000
      - HEADLESS=true
      # Add any additional environment variables from .env file

    # Load environment from .env file
    env_file:
      - .env

    # Volumes for persistent test results
    volumes:
      - ./test-results:/data/test-results
      - ./screenshots:/data/screenshots
      - ./videos:/data/videos
      - ./traces:/data/traces

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

    # Restart policy
    restart: unless-stopped

    # Enable stdin for MCP stdio communication
    stdin_open: true
    tty: true

    # Networking (not required for MCP stdio but useful for health checks)
    networks:
      - mcp-network

    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Optional: n8n integration for orchestration
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-orchestrator
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-changeme}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=${WEBHOOK_URL:-http://localhost:5678/}
    volumes:
      - n8n-data:/home/node/.n8n
      - ./n8n-workflows:/home/node/.n8n/workflows
    networks:
      - mcp-network
    restart: unless-stopped
    depends_on:
      - mcp-playwright

networks:
  mcp-network:
    driver: bridge

volumes:
  n8n-data:
    driver: local
